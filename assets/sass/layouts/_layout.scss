@use '../utils/variables' as *;
@use '../utils/mixins' as *;

.row{
  position: relative;
  display: flex;
  align-items: center;
  gap: rem(10px);
  padding: 0 rem($layout-padding);

  /*
  * Dynamically assigns a height value on mobile based on the number of sections/actions
  * height: var(--row-{$i}-mobile);
  */
  @include dynamic-prop();

  @include device(tablet-and-up){
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-auto-flow: dense;
    align-items: center;
    gap: 0;

    /*
    * Dynamically assigns a height value on desktop based on the number of sections/actions
    * height: var(--row-{$i}-mobile);
    */
    @include dynamic-prop($device: desktop);
  }
}

.container{
  position: relative;
  display: flex;

  /*
  * Calculates content height on mobile by taking 100% of section size minus section heading size (row)
  * height: calc(100% - var(--row-${i}-mobile));
  */
  @include dynamic-calc($op: subtract, $unit: '%');

  @include device(tablet-and-up){
    /*
  * Calculates content height on desktop by taking 100% of section size minus section heading size (row)
  * height: calc(100% - var(--row-${i}-desktop));
  */
    @include dynamic-calc($device: desktop, $op: subtract, $unit: '%');
  }
}

.grid{
  width: 100%;
  display: grid;
  grid-auto-flow: dense;
  gap: 0;

  &-cols-3{
    grid-template-columns: repeat(3, 1fr);
  }

  &-cols-4{
    grid-template-columns: repeat(4, 1fr);
  }
}

.col {
  position: relative;
  display: flex;
  flex-direction: column;

  &-1-start { grid-column-start: 1; }

  &-2-start { grid-column-start: 2; }

  &-3-start { grid-column-start: 3; }

  &-4-start { grid-column-start: 4; }

  &-span-1 { grid-column: span 1; }

  &-span-2 { grid-column: span 2; }

  &-span-3 { grid-column: span 3; }

  &-span-4 { grid-column: span 4; }
}
